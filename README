Program Overview:
This is an implementation of a client and server. The client can connect to the server using TCP socket based connections, and make changes to an underlying database. The server supports multithreaded database modifications using fine-grained locking, signal handling, and can handle multiple clients at once. 

Run Instructions:
1. Run "make all" from the terminal in the root directory to compile the code
2. Run ./server <port number> to launch the server
3. Manually connect a client to the server via ./client <hostname> <portnumber>

The server supports the following commands:
"s" - Stops all threads
"g" - Restarts all currently stopped threads
"p" - Prints out the database

The client supports the following commands:
a <key> <value>: Adds <key> into the database with value <value>.
q <key>: Retrieves the value stored with key <key>.
d <key>: Deletes the given key and its associated value from the database.
f <file>: Executes the sequence of commands contained in the specified file.


Scripts can be used to execute multiple database modifications with multiple concurrent client instances via the following command:
./client <hostname> <port> [script] [occurrences] 

KNOWN BUGS:
No known bugs

PROGRAM ORGANIZATION:
My program begins in main, and uses the sighandler constructor to both mask off the SIGPIPE signal and the SIGINT signal, and to create a thread which handles the SIGINT signal. After this has been executed, start_listener is executed to create a single listener thread which waits for and accepts connection requests from clients. 

The listener thread waits for connection requests, and upon receiving these requests, calls client_constructor. This function creates a new thread to handle the client and then this original thread returns to listen for new connections. The new thread enters into run client, in which it first checks if the server is accepting new clients. If it is not, it terminates itself. If it is, it adds itself to the client list and enters a loop calling comm_serve to receive and respond to requests from the client. The result from comm_serve is passed into interpret_command to modify the database accordingly. Once the client has complete its requests, thread_cleanup is called to remove the client from the client list and remove any allocated resources. 

This initial thread on the other hand enters into a spin loop to wait for user input. If a  CTRL-D is received, it immediately terminates all current threads, exits the listener thread, eliminates the signal handler, cleans up the database, then exits. If a p is entered, the server calls db_print to print out the database. If S is input, the server temporarily pauses itself and stops running clients via client_control_stop. If a G is input, the server resumes all paused clients and then begins accepting new clients again. 

All database operations are handled via DB.C, in which fine grained locking has been implemented to ensure thread safety. For removal and addition, a write lock is propagated down the tree from parent to child. For query and print, a read lock is propagated downwards. 

Note: If a SIGINT is received, all current clients are terminated

